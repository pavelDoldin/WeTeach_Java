package javaCore;

public class SOLID {

    String decodingSOLID = "- Single responsibility principle (Принцип единственной ответственности)\n" +
            "Принцип гласит, что может быть только\n" +
            "одна причина, приводящая к изменению класса.\n" +
            "Другими словами, каждый класс должен иметь\n" +
            "только одну ответственность,\n" +
            "которая должна быть инкапсулирована\n" +
            "в этом классе.\n" +
            "- тестируемость;\n" +
            "- читаемость;\n" +
            "- короткое и понятное описание класса;\n" +
            "- простота сопровождения.\n" +

            "------------------------------------------------------------\n" +

            "- Open-closed principle (Принцип открытости/закрытости)\n" +
            "классы должны быть открыты для расширения\n" +
            "и одновременно закрыты для модификации.\n" +
            "Иными словами, должна быть возможность\n" +
            "добавлять новые свойства и расширять класс\n" +
            "без изменения внутренней реализации\n" +
            "существующих свойств.\n" +
            "«закрыт для модификации»\n" +
            "«Открыт для расширений»\n" +

            "-------------------------------------------------------\n" +

            "- Liskov substitution principle (Принцип подстановки Лисков)\n" +
            "Требует возможности использования любых\n" +
            "порожденных классов на месте родительских.\n" +
            "При этом они должны обладать\n" +
            "тем же поведением, что и родительские классы,\n" +
            "без внесения изменений.\n" +
            "Этот принцип гарантирует, что порожденный\n" +
            "класс не изменяет определение типа\n" +
            "родительского и его поведение. \n" +

            "---------------------------------------------------------------\n" +

            "- Interface segregation principle (Принцип разделения интерфейса)\n" +
            "Клиенты не должны реализовывать интерфейсы,\n" +
            "которые они не используют.\n" +
            "Данный принцип требует разделения «толстых»\n" +
            "интерфейсов на несколько специализированных,\n" +
            "связанных общей функциональностью.\n" +
            "-----------------------------------------------------------------\n" +
            "- Dependency inversion principle (Принцип инверсии зависимостей)\n" +
            "Принцип инверсии зависимостей\n" +
            "- модули высокого уровня не должны зависеть\n" +
            " от модулей нижнего уровня.\n" +
            "И те, и другие должны зависеть от абстракций.\n" +
            "- абстракции не должны зависеть от деталей.\n" +
            "Детали должны зависеть от абстракций.";
}


















